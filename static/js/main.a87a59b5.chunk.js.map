{"version":3,"sources":["todos/components/inputApp.js","todos/components/listWork.js","todos/reselect/todoReselect.js","todos/components/deleteAll.js","todos/components/finishAll.js","todos/components/unfinishedAll.js","todos/container/App.js","todos/action/index.js","todos/action/const.js","todos/reducer/todoReducer.js","todos/reducer/rootReducer.js","todos/store/store.js","todos/todo.js","serviceWorker.js","index.js"],"names":["Search","Input","React","memo","props","Fragment","placeholder","enterButton","size","onSearch","value","add","Text","Typography","ListWork","console","log","work","delete","finish","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","checked","done","onClick","id","title","name","rootReselct","state","todoReducer","listWorkReselect","createSelector","works","type","deleteAll","children","finishAll","unfinishedAll","App","span","offset","this","className","listWork","PureComponent","mapStateToProps","createStructuredSelector","connect","dispatch","nameWork","appToDoDelete","appToDoFinish","stateDefault","action","R","length","result","w","data","map","todos","data1","data2","rootReducer","combineReducers","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a87a59b5.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Input } from 'antd';\n\nconst { Search } = Input;\n\nexport const InputApp = (props) => {\n    return (\n        <React.Fragment>\n            <Search\n                placeholder=\"Enter your work\"\n                enterButton=\"Add\"\n                size=\"large\"\n                onSearch={value => props.add(value)}\n            />\n        </React.Fragment>\n    )\n}\n\nexport default React.memo(InputApp); ","import React from 'react'\nimport { List, Typography , Checkbox} from 'antd';\nimport { AiFillDelete } from \"react-icons/ai\";\nconst { Text } = Typography;\n\n\nconst ListWork = (props) => {\n    console.log(props.work);\n    console.log(props.delete);\n    console.log(props.finish);\n    return (\n        <React.Fragment>\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={props.work}\n                renderItem={item => (\n                <List.Item>\n                    <List.Item.Meta\n                       \n                        avatar={ <Checkbox checked={item.done}  onClick ={() => props.finish(item.id,item.done)} />}\n                        title={ !item.done  ? \n                            (<Text  onClick = {() => props.finish(item.id,item.done)}>{item.name}</Text>) \n                            : \n                            (<Text delete onClick={() => props.finish(item.id,item.done)}>{item.name}</Text>)}\n                    />\n\n\n                    <div>\n                        <AiFillDelete onClick={() => props.delete(item.id)} />\n                    </div>\n                </List.Item >\n                )}\n            />\n        </React.Fragment>\n    ) \n}\n\nexport default ListWork;","import { createSelector } from 'reselect';\n\n// lay ra state tong\nconst rootReselct = state => state.todoReducer\n\n// lay sate count (state con)\nexport const listWorkReselect = createSelector(\n    rootReselct,\n    item => item.works \n);\n\n\nexport const listWorkReselectID = createSelector(\n    rootReselct,\n    item => item.works\n);\n\n\n\n\n","import React from 'react'\nimport { Button } from 'antd';\n\nconst DeleteAll = (props) => {\n    return(\n        <React.Fragment>\n             <Button type=\"dashed\" onClick = {() => props.deleteAll()}>{props.children}</Button>\n        </React.Fragment>\n    )\n}\n\nexport default React.memo(DeleteAll);","import React from 'react'\nimport { Button } from 'antd';\n\nconst FinishAll = (props) => {\n    return(\n        <React.Fragment>\n             <Button type=\"dashed\" onClick={() => props.finishAll()}>{props.children}</Button>\n        </React.Fragment>\n    )\n}\n\nexport default React.memo(FinishAll);","import React from 'react'\nimport { Button } from 'antd';\n\nconst UnfinishedAll = (props) => {\n    return(\n        <React.Fragment>\n             <Button type=\"dashed\" onClick ={() => props.unfinishedAll()}>{props.children}</Button>\n        </React.Fragment>\n    )\n}\n\nexport default React.memo(UnfinishedAll);","import React from 'react'\nimport { Row, Col } from 'antd';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {appToDoWork, appToDoDelete, appToDoFinish, appToDoFinishAll, appToDoDeleteAll, appToDoUnfinishedAll} from '../action/index';\nimport InputApp from '../components/inputApp';\nimport ListWork from '../components/listWork'; \nimport {listWorkReselect} from '../reselect/todoReselect';\nimport DeleteAll from '../components/deleteAll';\nimport FinishAll from '../components/finishAll';\nimport UnfinishedAll from '../components/unfinishedAll';\nimport './App.css';\nclass App extends React.PureComponent{\n    render(){\n        return(\n            <React.Fragment>\n                <Row>\n                    <Col span={12} offset={6}>\n                        <InputApp\n                            add={this.props.add}\n                        />\n                        <div className = \"action\"> \n                            <FinishAll finishAll={this.props.finishAll}>Finish All</FinishAll>\n                            <DeleteAll deleteAll = {this.props.deleteAll}>Delete All</DeleteAll>\n                            <UnfinishedAll unfinishedAll = {this.props.unfinishedAll}>Unfinish All</UnfinishedAll>\n                        </div>\n                        <ListWork work={this.props.listWork} delete={this.props.delete} finish={this.props.finish}/>\n                    </Col>\n                </Row>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    listWork: listWorkReselect\n    \n});\n\n\n\nconst mapDispatchToProps = dispatch => ({\n    add: nameWork => dispatch(appToDoWork(nameWork)),\n    delete: id => dispatch(appToDoDelete(id)),\n    finish: (id,done) => dispatch(appToDoFinish(id,done)) , \n    finishAll: () => dispatch(appToDoFinishAll()), \n    deleteAll: () => dispatch(appToDoDeleteAll()),\n    unfinishedAll: () => dispatch(appToDoUnfinishedAll()), \n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {APPTODOADD, APPTODODELETE, APPTODOFINISH, APPTODOFINISHALL, APPTODODELETEALL, APPTODOUNFINISHEDALL} from './const';\n\nexport const appToDoWork = (name) => {\n    return {\n        type: APPTODOADD, \n        name\n    }\n}\n\nexport const appToDoDelete = (id) => {\n    return {\n        type: APPTODODELETE,\n        id\n    }\n}\n\nexport const appToDoFinish = (id, done) => {\n    return {\n        type: APPTODOFINISH,\n        id,\n        done\n    }\n}\n\nexport const appToDoFinishAll = () => {\n    return {\n        type: APPTODOFINISHALL, \n    }\n}\n\nexport const appToDoDeleteAll = () => {\n    return {\n        type: APPTODODELETEALL, \n    }\n}\n\n\nexport const appToDoUnfinishedAll = () => {\n    return {\n        type: APPTODOUNFINISHEDALL, \n    }\n}","\nexport const APPTODOADD = 'APPTODOADD';\nexport const APPTODODELETE = 'APPTODODELETE';\nexport const APPTODOFINISH = 'APPTODOFINISH';\nexport const APPTODOFINISHALL = 'APPTODOFINISHALL'; \nexport const APPTODODELETEALL = 'APPTODODELETEALL'; \nexport const APPTODOUNFINISHEDALL = 'APPTODOUNFINISHEDALL'; \n\n","import * as R from 'ramda';\nimport {APPTODOADD, APPTODODELETE, APPTODOFINISH, APPTODOFINISHALL, APPTODODELETEALL, APPTODOUNFINISHEDALL} from '../action/const';\n\nconst stateDefault = {\n    works: []\n\n}\n\nconst resetIndex = (item, id) => item[id] = id + 1 ;\n\n\nconst filterWork = (arrayWork, id) => {\n    let resArray = []\n    let length = arrayWork.length;\n    for(let i = 1 ; i < id ; i++){\n        resArray.concat(resArray, arrayWork[i]); \n    }\n    for(let i = id + 1 ; i <= arrayWork.length ; i++){\n        arrayWork[i].id = arrayWork[i].id - 1; \n        resArray.concat(resArray, arrayWork[i]); \n    }\n    return resArray; \n}\n\n\n\nconst todoReducer = (state = stateDefault, action) => {\n    switch(action.type){\n        case APPTODOADD:\n            return {\n                works: R.concat(state.works, [{\n                    id: state.works.length + 1,\n                    name: action.name,\n                    done: false\n                }])\n            }\n        case APPTODODELETE:\n            const result = R.filter(w => w.id !== action.id, state.works);\n            return {works : result}\n            \n        //    for(let i = action.id; i < state.works.length ; i++){\n        //        state.works[i].id -= 1; \n        //    }\n\n            \n        //     return {\n        //         works: R.remove(action.id - 1, 1 , state.works), \n               \n        //     }\n\n\n        case APPTODOFINISH:\n            const data = state.works.map(todos => \n                todos.id === action.id ? {...todos, done: !action.done} : todos\n            )\n\n            return {works: data}\n\n        /*\n            const printXPlusFive = (x) => {\n                if(x.id === action.id){\n                    x.done = !(action.done); \n                }\n            };\n\n            return {\n                works: R.forEach(printXPlusFive, state.works), \n            }\n        */\n\n        case APPTODOFINISHALL: \n            const data1 = state.works.map(todos => ({...todos, done: true}) )\n            \n            return{\n                works: data1, \n            }\n\n        case APPTODODELETEALL: \n            return {\n                works: [], \n            }\n\n        case APPTODOUNFINISHEDALL: \n            const data2 = state.works.map(todos => ({...todos, done:false}))\n\n            return {\n                works: data2, \n            }\n        default:\n            return state;\n    }\n}\n\nexport default todoReducer;\n\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\n\nconst rootReducer = combineReducers({\n    todoReducer\n});\n\nexport default rootReducer; ","import { createStore } from 'redux';\nimport rootReducer from '../reducer/rootReducer';\n\nexport const store = createStore(rootReducer);","import React from 'react'\nimport { Provider } from 'react-redux';\nimport App from './container/App';\nimport {store} from './store/store';\n\nconst TodoApp = () => {\n    return(\n        <React.Fragment>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </React.Fragment>\n    )\n}\n\nexport default React.memo(TodoApp);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './todos/todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}